
// Navy ~ 0.1-lite
// ^^^ First comment should provide a NavyJS version

// Meta tag
[OVERLAY name=Entries, ctx=Canvas, author=ChartMaster, version=1.0.0]

// Define new props
// (the same as in 'settings.props' of Overlay object)
prop('radius', {  type: 'number', def: 6 })
prop('size', {  type: 'number', def: '6' })
prop('linewidth', {  type: 'number', def: '8' })
prop('color', {  type: 'color', def: '#b800e6' })
prop('shape', {
    type: 'string',
    def: 'point',
    options: ['point', 'square', 'cross', 'triangle']
})

// Any variables/constants
const _3Y = 60 * 60 * 24 * 365 * 3 * 1000

// Draw function (called on each update)
// Library provides a lot of useful variables to make
// overlays ($core in the main collection)
draw(ctx) {
    const layout = $core.layout
    const view = $core.view

    ctx.fillStyle = $props.color
    ctx.strokeStyle = $props.color
    drawXes(ctx, view, layout)
}

drawCircles(ctx, view, layout) {
    const radius = $props.size
    const data = view.src
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.moveTo(x+radius, y)
        ctx.arc(x, y, radius, 0, Math.PI * 2, false)
    }
    ctx.fill()
}

drawSquares(ctx, view, layout) {
    const half = $props.size
    const side = half * 2
    const data = view.src
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.moveTo(x-half, y-half)
        ctx.lineTo(x+side, y-half)
        ctx.lineTo(x+side, y+side)
        ctx.lineTo(x-half, y+side)
    }
    ctx.fill()
}

drawCrosses(ctx, view, layout) {
    const half = $props.size
    const side = half * 2
    const data = view.src
    ctx.lineWidth = $props.linewidth
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.moveTo(x-side, y)
        ctx.lineTo(x+side, y)
        ctx.moveTo(x, y-side)
        ctx.lineTo(x, y+side)
    }
    ctx.stroke()
}

drawXes(ctx, view, layout) {
    const half = $props.size
    const side = half * 2
    const data = view.src
    ctx.lineWidth = $props.linewidth
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.moveTo(x-side, y-side)
        ctx.lineTo(x+side, y+side)
        ctx.moveTo(x-side, y+side)
        ctx.lineTo(x+side, y-side)
    }
    ctx.stroke()
}

drawTriandles(ctx, view, layout) {
    const half = $props.size
    const side = half * 2
    const data = view.src
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.moveTo(x, y)
        ctx.lineTo(x + side * 0.63, y + side )
        ctx.lineTo(x - side * 0.63, y + side )
    }
    ctx.fill()
}
